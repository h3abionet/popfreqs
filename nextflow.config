/*
 * -------------------------------------------------
 *  nf-core/chipfreqs Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Workflow flags
  // TODO nf-core: Specify your pipeline's command line flags

  outdir = './results'
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
// process.container = 'docker://quay.io/h3abionet_org/impute2'
process.container = 'docker://quay.io/mypandos/pgx_tools'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

//// Load nf-core custom profiles from different Institutions
//try {
//  includeConfig "${params.custom_config_base}/nfcore_custom.config"
//} catch (Exception e) {
//  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
//}

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    // process.container = 'docker://quay.io/h3abionet_org/impute2:v3'
    process.container = 'docker://quay.io/mypandos/pgx_tools'
  }
  test { includeConfig 'conf/test.config' }
  slurm {
    process{
      executor = 'slurm'
      maxRetries      = 0
      maxErrors       = 10000
      errorStrategy   = 'retry'
    }
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "./execution_timeline.html"
}
report {
  enabled = true
  file = "./execution_report.html"
}
trace {
  enabled = true
  file = "./execution_trace.txt"
}
dag {
  enabled = true
  file = "./pipeline_dag.svg"
}

manifest {
  name = 'nf-core/chipfreqs'
  author = 'Mamana Mbiyavanga'
  homePage = 'https://github.com/nf-core/chipfreqs'
  description = 'Chip frequencies per populations from a VCF file'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
